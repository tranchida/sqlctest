// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package models

import (
	"context"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*) FROM product
`

func (q *Queries) CountProducts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (name, email) VALUES ($1, $2) RETURNING id, name, email
`

type CreateCustomerParams struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer, arg.Name, arg.Email)
	var i Customer
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (customer_id, product_id, quantity) VALUES ($1, $2, $3) RETURNING id, customer_id, product_id, quantity, created_at
`

type CreateOrderParams struct {
	CustomerID int64 `json:"customer_id"`
	ProductID  int64 `json:"product_id"`
	Quantity   int32 `json:"quantity"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.CustomerID, arg.ProductID, arg.Quantity)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
	)
	return i, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (code, price, stock) VALUES ($1, $2, $3) RETURNING id, code, price, stock
`

type CreateProductParams struct {
	Code  string `json:"code"`
	Price int32  `json:"price"`
	Stock int32  `json:"stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Code, arg.Price, arg.Stock)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Price,
		&i.Stock,
	)
	return i, err
}

const getProductById = `-- name: GetProductById :one
SELECT id, code, price, stock FROM product WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductById(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Price,
		&i.Stock,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT 
    customer.id, customer.name, customer.email, 
    product.id, product.code, product.price, product.stock, 
    "order".quantity 
FROM customer 
join "order" on customer.id = "order".customer_id
join product on product.id = "order".product_id
ORDER BY customer.name, product.code
`

type ListOrdersRow struct {
	ID       int64  `json:"id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	ID_2     int64  `json:"id_2"`
	Code     string `json:"code"`
	Price    int32  `json:"price"`
	Stock    int32  `json:"stock"`
	Quantity int32  `json:"quantity"`
}

func (q *Queries) ListOrders(ctx context.Context) ([]ListOrdersRow, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListOrdersRow
	for rows.Next() {
		var i ListOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.ID_2,
			&i.Code,
			&i.Price,
			&i.Stock,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, code, price, stock FROM product ORDER BY code
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Price,
			&i.Stock,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE product SET code = $1, price = $2, stock = $3 WHERE id = $4 RETURNING id, code, price, stock
`

type UpdateProductParams struct {
	Code  string `json:"code"`
	Price int32  `json:"price"`
	Stock int32  `json:"stock"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct,
		arg.Code,
		arg.Price,
		arg.Stock,
		arg.ID,
	)
	return err
}

const updateProductPrice = `-- name: UpdateProductPrice :exec
UPDATE product SET price = $1 WHERE id = $2 RETURNING id, code, price, stock
`

type UpdateProductPriceParams struct {
	Price int32 `json:"price"`
	ID    int64 `json:"id"`
}

func (q *Queries) UpdateProductPrice(ctx context.Context, arg UpdateProductPriceParams) error {
	_, err := q.db.Exec(ctx, updateProductPrice, arg.Price, arg.ID)
	return err
}
